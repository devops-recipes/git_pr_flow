get_img_temp: &get_img
  - |
      export APP_IMG=$(shipctl get_resource_version_key $INPUT_IMG_INFO sourceName)
      export APP_TAG=$(shipctl get_resource_version_key $INPUT_IMG_INFO versionName)

get_cluster_temp: &get_cluster
  - |
      export CLUSTER_NAME=$(shipctl get_resource_version_key $TARGET_CLUSTER_INFO sourceName)
      export CLUSTER_REGION=$(shipctl get_resource_version_key $TARGET_CLUSTER_INFO region)
      gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_REGION

deploy_temp: &deploy
  - |
      shipctl replace appDeploy.yml appSvc.yml
      kubectl delete  -f ./appDeploy.yml 2>/dev/null || echo ""
      kubectl delete -f ./appSvc.yml  2>/dev/null || echo ""
      kubectl create -o json -f ./appDeploy.yml >> kube_output.json
      kubectl create -o json -f ./appSvc.yml >> kube_output.json
      cat kube_output.json

language: node_js

integrations:
  hub:
    - integrationName: docker_repo
      type: dockerRegistryLogin

branches:
  only:
    - master
    - stg

env:
  global:
    - TEST_RESULTS_DIR=./shippable/testresults
    - CODE_COVERAGE_DIR=./shippable/codecoverage
    - TESTS_LOC_DIR=./tests
    - MOD_LOC=./node_modules/.bin/

build:
  ci:
    - shipctl retry "npm install"
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - $MOD_LOC/mocha --recursive "$TESTS_LOC_DIR/**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=$TEST_RESULTS_DIR/testresults.xml
    - $MOD_LOC/istanbul --include-all-sources cover -root "$SHIPPABLE_REPO_DIR/routes" ./node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "$TESTS_LOC_DIR/**/*.spec.js"
    - $MOD_LOC/istanbul report cobertura --dir $CODE_COVERAGE_DIR

  post_ci:
    - APP_IMG=$(shipctl get_resource_version_key git_flow_img_preq "sourceName")
    - export
    - |
        if [ "$IS_PULL_REQUEST" == true ]; then
          export APP_TAG="pr."$PULL_REQUEST;
        else
          export APP_TAG=$BRANCH.$BUILD_NUMBER;
        fi
    - docker build -t $APP_IMG:$APP_TAG .
  on_success:
    - docker push $APP_IMG:$APP_TAG
    - |
        if [ "$IS_PULL_REQUEST" == true ]; then
          shipctl put_resource_state_multi git_flow_img_preq "versionName=$APP_TAG buildNumber=$BUILD_NUMBER commitSha=$COMMIT prNumber=$PULL_REQUEST";
        else
          shipctl put_resource_state_multi "git_flow_img_"$BRANCH "versionName=$APP_TAG buildNumber=$BUILD_NUMBER commitSha=$COMMIT branch=$BRANCH";
        fi

resources:
  - name: git_flow_cfg_repo
    type: gitRepo
    integration: "dr_gh"
    versionTemplate:
      sourceName: "devops-recipes/git_pr_flow"
      branch: master

  - name: git_flow_img_preq
    type: image
    integration: docker_repo
    versionTemplate:
      sourceName: "hendrix-docker-local.jfrog.io/git_flow_app"
      versionName: latest

  - name: git_flow_img_master
    type: image
    integration: docker_repo
    versionTemplate:
      sourceName: "hendrix-docker-local.jfrog.io/git_flow_app"
      versionName: latest

  - name: git_flow_img_stg
    type: image
    integration: docker_repo
    versionTemplate:
      sourceName: "hendrix-docker-local.jfrog.io/git_flow_app"
      versionName: latest

  - name: git_flow_gcp_creds
    type: cliConfig
    integration: "dr_gcp"

jobs:
  - name: git_flow_flow_runCI
    type: runCI
    dependencyMode: strict
    triggerMode: parallel
    steps:
      - OUT: git_flow_img_stg
      - OUT: git_flow_img_master
      - OUT: git_flow_img_preq
    flags:
      - git_flow
      - ci

  - name: deploy_git_flow_preq
    type: runSh
    steps:
      - IN: git_flow_img_preq
      - IN: git_flow_gcp_creds
        switch: off
      - IN: git_flow_cfg_repo
        switch: off
      - IN: gcp_gke_cluster
        switch: off
      - TASK:
          name: deploy_pReqs
          runtime:
            options:
              env:
                - APP_LABEL: "git-flow-app"
                - APP_NAMESPACE: "test"
                - INPUT_IMG_INFO: "git_flow_img_preq"
                - TARGET_CLUSTER_INFO: "gcp_gke_cluster"
          script:
            - pushd $(shipctl get_resource_state "git_flow_cfg_repo")/specs
            - export APP_IMG=$(shipctl get_resource_version_key git_flow_img_preq sourceName)
            - export APP_TAG=$(shipctl get_resource_version_key git_flow_img_preq versionName)
            - shipctl replace appDeploy.yml appSvc.yml
            - gcloud container clusters get-credentials $CLUSTER --zone $REGION
            - kubectl delete  -f ./appDeploy.yml 2>/dev/null || echo ""
            - kubectl delete -f ./appSvc.yml  2>/dev/null || echo ""
            - kubectl create -o json -f ./appDeploy.yml >> kube_output.json
            - kubectl create -o json -f ./appSvc.yml >> kube_output.json
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME versionName $APP_TAG
    always:
      script:
        - kubectl delete  -f ./appDeploy.yml 2>/dev/null || echo ""
        - kubectl delete -f ./appSvc.yml  2>/dev/null || echo ""
    flags:
      - gke
      - cd
      - kctl
      - git_flow

  - name: deploy_git_flow_stg
    type: runSh
    steps:
      - IN: git_flow_img_stg
      - IN: git_flow_gcp_creds
        switch: off
      - IN: git_flow_cfg_repo
        switch: off
      - IN: gcp_gke_cluster
        switch: off
      - TASK:
          name: deploy_pReqs
          runtime:
            options:
              env:
                - APP_LABEL: "git-flow-app"
                - APP_NAMESPACE: "stg"
                - INPUT_IMG_INFO: "git_flow_img_stg"
                - TARGET_CLUSTER_INFO: "gcp_gke_cluster"
          script:
            - pushd $(shipctl get_resource_state "git_flow_cfg_repo")/specs
            - export APP_IMG=$(shipctl get_resource_version_key git_flow_img_stg sourceName)
            - export APP_TAG=$(shipctl get_resource_version_key git_flow_img_stg versionName)
            - shipctl replace appDeploy.yml appSvc.yml
            - gcloud container clusters get-credentials $CLUSTER --zone $REGION
            - kubectl delete  -f ./appDeploy.yml 2>/dev/null || echo ""
            - kubectl delete -f ./appSvc.yml  2>/dev/null || echo ""
            - kubectl create -o json -f ./appDeploy.yml >> kube_output.json
            - kubectl create -o json -f ./appSvc.yml >> kube_output.json
            - popd
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME versionName $APP_TAG
    flags:
      - gke
      - cd
      - kctl
      - git_flow

  - name: deploy_git_flow_master
    type: runSh
    steps:
      - IN: git_flow_img_master
      - IN: git_flow_gcp_creds
        switch: off
      - IN: git_flow_cfg_repo
        switch: off
      - IN: gcp_gke_cluster
        switch: off
      - TASK:
          name: deploy_pReqs
          runtime:
            options:
              env:
                - APP_LABEL: "git-flow-app"
                - APP_NAMESPACE: "prod"
                - INPUT_IMG_INFO: "git_flow_img_master"
                - TARGET_CLUSTER_INFO: "gcp_gke_cluster"
          script:
            - pushd $(shipctl get_resource_state "git_flow_cfg_repo")/specs
            - export APP_IMG=$(shipctl get_resource_version_key git_flow_img_master sourceName)
            - export APP_TAG=$(shipctl get_resource_version_key git_flow_img_master versionName)
            - shipctl replace appDeploy.yml appSvc.yml
            - gcloud container clusters get-credentials $CLUSTER --zone $REGION
            - kubectl delete  -f ./appDeploy.yml 2>/dev/null || echo ""
            - kubectl delete -f ./appSvc.yml  2>/dev/null || echo ""
            - kubectl create -o json -f ./appDeploy.yml >> kube_output.json
            - kubectl create -o json -f ./appSvc.yml >> kube_output.json
            - popd
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME versionName $APP_TAG
    flags:
      - gke
      - cd
      - kctl
      - git_flow