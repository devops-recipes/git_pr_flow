language: node_js

branches:
  only:
    - master
    - stg

env:
  global:
    - TEST_RESULTS_DIR=./shippable/testresults
    - CODE_COVERAGE_DIR=./shippable/codecoverage
    - TESTS_LOC_DIR=./tests
    - MOD_LOC=./node_modules/.bin/

build:
  ci:
    - shipctl retry "npm install"
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - $MOD_LOC/mocha --recursive "$TESTS_LOC_DIR/**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=$TEST_RESULTS_DIR/testresults.xml
    - $MOD_LOC/istanbul --include-all-sources cover -root "$SHIPPABLE_REPO_DIR/routes" ./node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "$TESTS_LOC_DIR/**/*.spec.js"
    - $MOD_LOC/istanbul report cobertura --dir $CODE_COVERAGE_DIR

  post_ci:
    - DH_USR_NAME=$(shipctl get_integration_resource_field git_pr_app_img_dh "userName")
    - DH_PASS=$(shipctl get_integration_resource_field git_pr_app_img_dh "password")
    - docker login -u $DH_USR_NAME -p $DH_PASS
    - APP_IMG=$(shipctl get_resource_version_key git_pr_app_img_dh "sourceName")
    - export
    - |
        if [ "$IS_PULL_REQUEST" == true ]; then
          export APP_TAG="pr."$PULL_REQUEST;
        else
          export APP_TAG=$BRANCH.$BUILD_NUMBER;
        fi
    - docker build -t $APP_IMG:$APP_TAG .
    - docker push $APP_IMG:$APP_TAG
    - |
        if [ "$IS_PULL_REQUEST" == true ]; then
          shipctl put_resource_state_multi git_pr_img_preq "versionName=$APP_TAG buildNumber=$BUILD_NUMBER commitSha=$COMMIT prNumber=$PULL_REQUEST";
        else
          shipctl put_resource_state_multi "git_pr_img_"$BRANCH "versionName=$APP_TAG buildNumber=$BUILD_NUMBER commitSha=$COMMIT branch=$BRANCH";
        fi
#    - |
#        if [ "$IS_PULL_REQUEST" == true ]; then
#          cd specs;
#          shipctl replace appDeploy.yml appSvc.yml;
#          cat appDeploy.yml;
#        fi

#    - echo $(shipctl get_integration_resource_field git_pr_gke_cluster JSON_key) > key.json
#    - gcloud -q auth activate-service-account --key-file key.json
#    - CLUST=$(shipctl get_resource_version_key git_pr_gke_cluster sourceName)
#    - export CLUST_REG=$(shipctl get_resource_version_key git_pr_gke_cluster region)
#    - gcloud container clusters get-credentials $CLUST --zone $CLUST_REG
#          kubectl delete  -f ./appDeploy.yml 2>/dev/null || echo ""
#          kubectl delete -f ./appSvc.yml  2>/dev/null || echo ""
#          kubectl create -o json -f ./appDeploy.yml >> kube_output.json
#          kubectl create -o json -f ./appSvc.yml >> kube_output.json


#  on_success:
#    - shipctl put_resource_state $SHIP_IMG_RES versionName $BRANCH.$BUILD_NUMBER
#
### OPTIONAL : In case you want to use this image in CD Assembly Lines
resources:
  - name: git_pr_img_preq
    type: image
    integration: drship_dockerhub # replace with your integration name
    versionTemplate:
      sourceName: "devopsrecipes/git_pr_flow_app" # replace with your Hub URL
      versionName: latest

  - name: git_pr_img_master
    type: image
    integration: drship_dockerhub # replace with your integration name
    versionTemplate:
      sourceName: "devopsrecipes/git_pr_flow_app" # replace with your Hub URL
      versionName: latest

  - name: git_pr_img_stg
    type: image
    integration: drship_dockerhub # replace with your integration name
    versionTemplate:
      sourceName: "devopsrecipes/git_pr_flow_app" # replace with your Hub URL
      versionName: latest

# GKE cluster info
  - name: git_pr_gcp_c
    type: cliConfig
    integration: "drship_gcp"

jobs:
  - name: git_pr_flow_runCI
    type: runCI
    dependencyMode: strict
    triggerMode: parallel
    steps:
      - OUT: git_pr_img_stg
      - OUT: git_pr_img_master
      - OUT: git_pr_img_preq
    flags:
      - git_pr
