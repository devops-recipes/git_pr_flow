language: node_js

integrations:
  hub:
    - integrationName: drship_dockerhub
      type: dockerRegistryLogin

branches:
  only:
    - master
    - stg

env:
  global:
    - TEST_RESULTS_DIR=./shippable/testresults
    - CODE_COVERAGE_DIR=./shippable/codecoverage
    - TESTS_LOC_DIR=$./tests
    - MOD_LOC=./node_modules/.bin/
    - DOCKER_IMG="git_pr_flow_app"
    - DOCKER_REPO=devopsrecipes # {account name}

build:
  ci:
    - shipctl retry "npm install"
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - $MOD_LOC/mocha --recursive "$TESTS_LOC_DIR/**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=$TEST_RESULTS_DIR/testresults.xml
    - $MOD_LOC/istanbul --include-all-sources cover -root "$SHIPPABLE_REPO_DIR/routes" ./node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "$TESTS_LOC_DIR/**/*.spec.js"
    - $MOD_LOC/istanbul report cobertura --dir $CODE_COVERAGE_DIR

  post_ci:
    - APP_IMG=$DOCKER_REPO/$DOCKER_IMG
    - |
        if [ "$IS_PULL_REQUEST" != true ]; then
          APP_TAG="pr."$PULL_REQUEST;
        else
          APP_TAGTAG=$BRANCH.$BUILD_NUMBER;
        fi
    - docker build -t $APP_IMG:$APP_TAG .
    - docker push $APP_IMG:$APP_TAG
    - |
        if [ "$IS_PULL_REQUEST" != true ]; then
          cd specs;
          shipctl replace appDeploy.yml appSvc.yml;
          cat appDeploy.yml;
        fi
#          export CLUST=$(shipctl get_resource_version_key gke_cluster sourceName)
#          export CLUST_REG=$(shipctl get_resource_version_key gke_cluster region)
#          gcloud container clusters get-credentials $CLUST --zone $CLUST_REG
#          kubectl delete  -f ./appDeploy.yml 2>/dev/null || echo ""
#          kubectl delete -f ./appSvc.yml  2>/dev/null || echo ""
#          kubectl create -o json -f ./appDeploy.yml >> kube_output.json
#          kubectl create -o json -f ./appSvc.yml >> kube_output.json


#  on_success:
#    - shipctl put_resource_state $SHIP_IMG_RES versionName $BRANCH.$BUILD_NUMBER
#
### OPTIONAL : In case you want to use this image in CD Assembly Lines
#resources:
#  - name: node_app_img_dh
#    type: image
#    integration: drship_dockerhub # replace with your integration name
#    versionTemplate:
#      sourceName: "devopsrecipes/node_app" # replace with your Hub URL
#      isPull: false
#      versionName: latest
#
#jobs:
#  - name: node_app_runCI
#    type: runCI
#    dependencyMode: strict
#    triggerMode: parallel
#    steps:
#      - OUT: node_app_img_dh
#    flags:
#      - node_app
